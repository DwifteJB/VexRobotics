{"mode":"Text","textContent":"#pragma region VEXcode Generated Robot Configuration\r\n// Make sure all required headers are included.\r\n#include <stdio.h>\r\n#include <stdlib.h>\r\n#include <stdbool.h>\r\n#include <math.h>\r\n#include <string.h>\r\n\r\n\r\n#include \"vex.h\"\r\n\r\nusing namespace vex;\r\n\r\n// Brain should be defined by default\r\nbrain Brain;\r\n\r\n\r\n// START IQ MACROS\r\n#define waitUntil(condition)                                                   \\\r\n  do {                                                                         \\\r\n    wait(5, msec);                                                             \\\r\n  } while (!(condition))\r\n\r\n#define repeat(iterations)                                                     \\\r\n  for (int iterator = 0; iterator < iterations; iterator++)\r\n// END IQ MACROS\r\n\r\n\r\n// Robot configuration code.\r\ncontroller Controller = controller();\r\nmotor LeftDriveSmart = motor(PORT6, 1, false);\r\nmotor RightDriveSmart = motor(PORT12, 1, true);\r\ndrivetrain Drivetrain = drivetrain(LeftDriveSmart, RightDriveSmart, 200, 165, 130, mm, 1);\r\nmotor claw = motor(PORT8, false);\r\nsonar dist = sonar(PORT3);\r\n\r\n// define variable for remote controller enable/disable\r\nbool RemoteControlCodeEnabled = true;\r\n// define variables used for controlling motors based on controller inputs\r\nbool DrivetrainNeedsToBeStopped_Controller = true;\r\n\r\n// define a task that will handle monitoring inputs from Controller\r\nint rc_auto_loop_function_Controller() {\r\n  // process the controller input every 20 milliseconds\r\n  // update the motors based on the input values\r\n  while(true) {\r\n    if(RemoteControlCodeEnabled) {\r\n      // calculate the drivetrain motor velocities from the controller joystick axies\r\n      // left = AxisA + AxisB\r\n      // right = AxisA - AxisB\r\n      int drivetrainLeftSideSpeed = Controller.AxisA.position() + Controller.AxisB.position();\r\n      int drivetrainRightSideSpeed = Controller.AxisA.position() - Controller.AxisB.position();\r\n      \r\n      // check if the values are inside of the deadband range\r\n      if (abs(drivetrainLeftSideSpeed) < 5 && abs(drivetrainRightSideSpeed) < 5) {\r\n        // check if the motors have already been stopped\r\n        if (DrivetrainNeedsToBeStopped_Controller) {\r\n          // stop the drive motors\r\n          LeftDriveSmart.stop();\r\n          RightDriveSmart.stop();\r\n          // tell the code that the motors have been stopped\r\n          DrivetrainNeedsToBeStopped_Controller = false;\r\n        }\r\n      } else {\r\n        // reset the toggle so that the deadband code knows to stop the motors next time the input is in the deadband range\r\n        DrivetrainNeedsToBeStopped_Controller = true;\r\n      }\r\n      \r\n      // only tell the left drive motor to spin if the values are not in the deadband range\r\n      if (DrivetrainNeedsToBeStopped_Controller) {\r\n        LeftDriveSmart.setVelocity(drivetrainLeftSideSpeed, percent);\r\n        LeftDriveSmart.spin(forward);\r\n      }\r\n      // only tell the right drive motor to spin if the values are not in the deadband range\r\n      if (DrivetrainNeedsToBeStopped_Controller) {\r\n        RightDriveSmart.setVelocity(drivetrainRightSideSpeed, percent);\r\n        RightDriveSmart.spin(forward);\r\n      }\r\n    }\r\n    // wait before repeating the process\r\n    wait(20, msec);\r\n  }\r\n  return 0;\r\n}\r\n\r\ntask rc_auto_loop_task_Controller(rc_auto_loop_function_Controller);\r\n\r\n\r\n\r\n#pragma endregion VEXcode Generated Robot Configuration\r\n//----------------------------------------------------------------------------\r\n//                                                                            \r\n//    Module:       main.cpp                                                  \r\n//    Author:       Owen Exon and Robbie Elliott                                                  \r\n//    Created:      22/03/2022                                                    \r\n//    Description:  JoshBot V1                                               \r\n//                                                                            \r\n//----------------------------------------------------------------------------\r\n\r\n// Include the IQ Library\r\n#include \"iq_cpp.h\"\r\n\r\n// Allows for easier use of the VEX Library\r\nusing namespace vex;\r\n// Functions\r\n\r\n//\r\n// EG: basicScreen(boolean);\r\n// Desc: Creates a basic screen\r\n// Vars: boolean, determines if you want to clear the screen or not (not recommended)\r\n//\r\nvoid basicScreen(bool remove){\r\n //Check if you want to clear screen\r\n  if (remove == false) {\r\n    Brain.Screen.clearScreen();\r\n  }\r\n  Brain.Screen.setCursor(1,1);\r\n  Brain.Screen.print(\"OWEN BOT: v1.0\");\r\n  Brain.Screen.newLine();\r\n  Brain.Screen.setCursor(2,1);\r\n  Brain.Screen.print(\"Battery: %d%%\", Brain.Battery.capacity());\r\n}\r\n\r\n// ROBOT STARTS HERE\r\n\r\nvoid init() {\r\n  // Startup script\r\n  basicScreen(false);\r\n}\r\nvoid checkClaw() {\r\n  basicScreen(false);\r\n  Brain.Screen.setCursor(3,1);\r\n  Brain.Screen.print(\"Spinning: %d\", (bool)claw.isSpinning());\r\n  Brain.Screen.setCursor(4,1);\r\n  Brain.Screen.print(\"Claw Velocity: %d\", (char)claw.velocity(percent));\r\n}\r\nvoid checkVisual() {\r\n  basicScreen(false);\r\n  Brain.Screen.setCursor(3,1);\r\n  Brain.Screen.print(\"Object found: %d\", (bool)dist.foundObject());\r\n  Brain.Screen.setCursor(4,1);\r\n  Brain.Screen.print(\"Distance: %dmm\", (int)dist.distance(mm));\r\n}\r\nvoid clawMovement() {\r\n  // clamp system\r\n  if (claw.position(degrees) < -230){\r\n    claw.spin(reverse);\r\n    claw.setVelocity(20,percent);\r\n    wait(1,seconds);\r\n    claw.stop();\r\n    return;\r\n  }\r\n  else if (claw.position(degrees) > 1){\r\n    claw.spin(forward);\r\n    claw.setVelocity(20,percent);\r\n    wait(1,seconds);\r\n    claw.stop();\r\n    return;\r\n  }\r\n  else {\r\n    claw.spin(forward);\r\n    claw.setVelocity(Controller.AxisD.position(percent),percent);\r\n  }\r\n  checkClaw();\r\n}\r\nint main() {\r\n  // Init the bot\r\n  init();\r\n  // Allows claw movement on the D Axis\r\n  Controller.AxisD.changed(clawMovement);\r\n  // checking stuff\r\n  Brain.buttonUp.pressed(checkClaw);\r\n  Brain.buttonDown.pressed(checkVisual);\r\n}\r\n\r\n// ROBOT ENDS HERE","textLanguage":"cpp","rconfig":[{"port":[],"name":"Controller","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","e":"","eDir":"false","f":"","fDir":"false","l3r3":"","l3r3Dir":"false","drive":"arcadel"},"triportSourcePort":22},{"port":[6,12,0],"name":"Drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"2-motor","wheelSize":"200mm","gearRatio":"1:1","direction":"fwd","gyroType":"none","width":"165","unit":"mm","wheelbase":"130","wheelbaseUnit":"mm","xOffset":"0","yOffset":"0","thetaOffset":"0"},"triportSourcePort":22},{"port":[8],"name":"claw","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse"},"triportSourcePort":22},{"port":[3],"name":"dist","customName":true,"deviceType":"Distance","deviceClass":"sonar","setting":{},"triportSourcePort":22}],"slot":0,"platform":"IQ","sdkVersion":"20211210.18.00.00","appVersion":"2.3.1","fileFormat":"1.0.1","icon":"","targetBrainGen":"First","target":"Physical"}