{"mode":"Text","textContent":"#pragma region VEXcode Generated Robot Configuration\\n// Make sure all required headers are included.\\n#include <stdio.h>\\n#include <stdlib.h>\\n#include <stdbool.h>\\n#include <math.h>\\n#include <string.h>\\n\\n\\n#include \"vex.h\"\\n\\nusing namespace vex;\\n\\n// Brain should be defined by default\\nbrain Brain;\\n\\n\\n// START IQ MACROS\\n#define waitUntil(condition)                                                   \\\\n  do {                                                                         \\\\n    wait(5, msec);                                                             \\\\n  } while (!(condition))\\n\\n#define repeat(iterations)                                                     \\\\n  for (int iterator = 0; iterator < iterations; iterator++)\\n// END IQ MACROS\\n\\n\\n// Robot configuration code.\\ncontroller Controller = controller();\\nmotor LeftDriveSmart = motor(PORT6, 1, false);\\nmotor RightDriveSmart = motor(PORT12, 1, true);\\ndrivetrain Drivetrain = drivetrain(LeftDriveSmart, RightDriveSmart, 200, 165, 130, mm, 1);\\nmotor claw = motor(PORT8, false);\\nsonar dist = sonar(PORT3);\\n\\n// define variable for remote controller enable/disable\\nbool RemoteControlCodeEnabled = true;\\n// define variables used for controlling motors based on controller inputs\\nbool DrivetrainNeedsToBeStopped_Controller = true;\\n\\n// define a task that will handle monitoring inputs from Controller\\nint rc_auto_loop_function_Controller() {\\n  // process the controller input every 20 milliseconds\\n  // update the motors based on the input values\\n  while(true) {\\n    if(RemoteControlCodeEnabled) {\\n      // calculate the drivetrain motor velocities from the controller joystick axies\\n      // left = AxisA + AxisB\\n      // right = AxisA - AxisB\\n      int drivetrainLeftSideSpeed = Controller.AxisA.position() + Controller.AxisB.position();\\n      int drivetrainRightSideSpeed = Controller.AxisA.position() - Controller.AxisB.position();\\n      \\n      // check if the values are inside of the deadband range\\n      if (abs(drivetrainLeftSideSpeed) < 5 && abs(drivetrainRightSideSpeed) < 5) {\\n        // check if the motors have already been stopped\\n        if (DrivetrainNeedsToBeStopped_Controller) {\\n          // stop the drive motors\\n          LeftDriveSmart.stop();\\n          RightDriveSmart.stop();\\n          // tell the code that the motors have been stopped\\n          DrivetrainNeedsToBeStopped_Controller = false;\\n        }\\n      } else {\\n        // reset the toggle so that the deadband code knows to stop the motors next time the input is in the deadband range\\n        DrivetrainNeedsToBeStopped_Controller = true;\\n      }\\n      \\n      // only tell the left drive motor to spin if the values are not in the deadband range\\n      if (DrivetrainNeedsToBeStopped_Controller) {\\n        LeftDriveSmart.setVelocity(drivetrainLeftSideSpeed, percent);\\n        LeftDriveSmart.spin(forward);\\n      }\\n      // only tell the right drive motor to spin if the values are not in the deadband range\\n      if (DrivetrainNeedsToBeStopped_Controller) {\\n        RightDriveSmart.setVelocity(drivetrainRightSideSpeed, percent);\\n        RightDriveSmart.spin(forward);\\n      }\\n    }\\n    // wait before repeating the process\\n    wait(20, msec);\\n  }\\n  return 0;\\n}\\n\\ntask rc_auto_loop_task_Controller(rc_auto_loop_function_Controller);\\n\\n\\n\\n#pragma endregion VEXcode Generated Robot Configuration\\n\\n//----------------------------------------------------------------------------\\n//                                                                            \\n//    Module:       main.cpp                                                  \\n//    Author:       Owen Exon and Robbie Elliott                                                  \\n//    Created:      22/03/2022                                                    \\n//    Description:  JoshBot V1                                               \\n//                                                                            \\n//----------------------------------------------------------------------------\\n\\n// Include the IQ Library\\n#include \"iq_cpp.h\"\\n\\n// Allows for easier use of the VEX Library\\nusing namespace vex;\\n// Functions\\n\\n//\\n// EG: basicScreen(boolean);\\n// Desc: Creates a basic screen\\n// Vars: boolean, determines if you want to clear the screen or not (not recommended)\\n//\\nvoid basicScreen(bool remove){\\n //Check if you want to clear screen\\n  if (remove == false) {\\n    Brain.Screen.clearScreen();\\n  }\\n  Brain.Screen.setCursor(1,1);\\n  Brain.Screen.print(\"OWEN BOT: v1.0\");\\n  Brain.Screen.newLine();\\n  Brain.Screen.setCursor(2,1);\\n  Brain.Screen.print(\"Battery: %d%%\", Brain.Battery.capacity());\\n}\\n\\n//program\\n\\nvoid init() {\\n  // Startup script\\n  basicScreen(false);\\n}\\nvoid checkClaw() {\\n  basicScreen(false);\\n  Brain.Screen.setCursor(3,1);\\n  Brain.Screen.print(\"Spinning: %d\", (char)claw.isSpinning());\\n  Brain.Screen.setCursor(4,1);\\n  Brain.Screen.print(\"Claw Velocity: %d\", (char)claw.velocity(percent));\\n}\\nvoid checkMove() {\\n  basicScreen(false);\\n\\n}\\nvoid checkVisual() {\\n  basicScreen(false);\\n  Brain.Screen.setCursor(3,1);\\n  Brain.Screen.print(\"Object found: %d\", (bool)dist.foundObject());\\n  Brain.Screen.setCursor(4,1);\\n  Brain.Screen.print(\"Distance: %dmm\", (int)dist.distance(mm));\\n}\\nvoid clawMovement() {\\n  // clamp system\\n  if (claw.position(degrees) < -230){\\n    claw.spin(reverse);\\n    claw.setVelocity(20,percent);\\n    wait(1,seconds);\\n    claw.stop();\\n    return;\\n  }\\n  else if (claw.position(degrees) > 1){\\n    claw.spin(forward);\\n    claw.setVelocity(20,percent);\\n    wait(1,seconds);\\n    claw.stop();\\n    return;\\n  }\\n  else {\\n    claw.spin(forward);\\n    claw.setVelocity(Controller.AxisD.position(percent),percent);\\n  }\\n  checkClaw();\\n}\\nint main() {\\n  // Init the bot\\n  init();\\n  // Allows claw movement on the D Axis\\n  Controller.AxisD.changed(clawMovement);\\n  // checking stuff\\n  Brain.buttonUp.pressed(checkClaw);\\n  Brain.buttonDown.pressed(checkMove);\\n  Brain.buttonCheck.pressed(checkVisual);\\n}","textLanguage":"cpp","rconfig":[{"port":[],"name":"Controller","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","e":"","eDir":"false","f":"","fDir":"false","l3r3":"","l3r3Dir":"false","drive":"arcadel"},"triportSourcePort":22},{"port":[6,12,0],"name":"Drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"2-motor","wheelSize":"200mm","gearRatio":"1:1","direction":"fwd","gyroType":"none","width":"165","unit":"mm","wheelbase":"130","wheelbaseUnit":"mm","xOffset":"0","yOffset":"0","thetaOffset":"0"},"triportSourcePort":22},{"port":[8],"name":"claw","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse"},"triportSourcePort":22},{"port":[3],"name":"dist","customName":true,"deviceType":"Distance","deviceClass":"sonar","setting":{},"triportSourcePort":22}],"slot":0,"platform":"IQ","sdkVersion":"20211210.18.00.00","appVersion":"2.3.1","fileFormat":"1.0.1","icon":"","targetBrainGen":"First","target":"Physical"}