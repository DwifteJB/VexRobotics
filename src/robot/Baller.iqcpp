{"mode":"Text","textContent":"#pragma region VEXcode Generated Robot Configuration\r\n// Make sure all required headers are included.\r\n#include <stdio.h>\r\n#include <stdlib.h>\r\n#include <stdbool.h>\r\n#include <math.h>\r\n#include <string.h>\r\n\r\n\r\n#include \"vex.h\"\r\n\r\nusing namespace vex;\r\n\r\n// Brain should be defined by default\r\nbrain Brain;\r\n\r\n\r\n// START IQ MACROS\r\n#define waitUntil(condition)                                                   \\\r\n  do {                                                                         \\\r\n    wait(5, msec);                                                             \\\r\n  } while (!(condition))\r\n\r\n#define repeat(iterations)                                                     \\\r\n  for (int iterator = 0; iterator < iterations; iterator++)\r\n// END IQ MACROS\r\n\r\n\r\n// Robot configuration code.\r\ncontroller Controller = controller();\r\nmotor claw = motor(PORT8, false);\r\nsonar dist = sonar(PORT3);\r\n\r\n// define variable for remote controller enable/disable\r\nbool RemoteControlCodeEnabled = true;\r\n\r\n\r\n\r\n\r\n#pragma endregion VEXcode Generated Robot Configuration\r\n//----------------------------------------------------------------------------\r\n//                                                                            \r\n//    Module:       code.cpp                                                  \r\n//    Author:       Owen Exon and Robbie Elliott                                                  \r\n//    Created:      22/03/2022                                                    \r\n//    Description:  Baller bot                                             \r\n//                                                                            \r\n//----------------------------------------------------------------------------\r\n\r\n// Include the IQ Library\r\n#include \"iq_cpp.h\"\r\n\r\n// Global Variables\r\nbool bypass_autoclamp = false;\r\nbool STOPMOVINGPLEASE = false;\r\n// Allows for easier use of the VEX Library\r\nusing namespace vex;\r\n// Functions\r\n\r\n//\r\n// EG: basicScreen(boolean);\r\n// Desc: Creates a basic screen\r\n// Vars: boolean, determines if you want to clear the screen or not (not recommended)\r\n//\r\nvoid basicScreen(bool remove){\r\n //Check if you want to clear screen\r\n  if (remove == false) {\r\n    Brain.Screen.clearScreen();\r\n  }\r\n  Brain.Screen.setCursor(1,1);\r\n  Brain.Screen.print(\"Baller: v1.0\");\r\n  Brain.Screen.newLine();\r\n  Brain.Screen.setCursor(2,1);\r\n  Brain.Screen.print(\"Battery: %d%%\", Brain.Battery.capacity());\r\n}\r\n\r\n// ROBOT STARTS HERE\r\n\r\nvoid init() {\r\n  // Startup script\r\n  basicScreen(false);\r\n}\r\nvoid checkClaw() {\r\n  basicScreen(false);\r\n  Brain.Screen.setCursor(3,1);\r\n  Brain.Screen.print(\"byp: %d\", (bool)bypass_autoclamp);\r\n  Brain.Screen.setCursor(4,1);\r\n  Brain.Screen.print(\"Claw Pos: %d\", (char)claw.position(degrees));\r\n}\r\n\r\nvoid checkVisual() {\r\n  basicScreen(false);\r\n  Brain.Screen.setCursor(3,1);\r\n  Brain.Screen.print(\"Object found: %d\", (bool)dist.foundObject());\r\n  Brain.Screen.setCursor(4,1);\r\n  Brain.Screen.print(\"Distance: %dmm\", (int)dist.distance(mm));\r\n}\r\nvoid autoGrab() {\r\n  if (dist.distance(mm) < 110 && bypass_autoclamp == false) {\r\n    checkVisual();\r\n    // I found the object within 110mm of the claw. What should I do?\r\n    // What should I add next? :)\r\n    claw.spin(reverse);\r\n    claw.setVelocity(20,percent);\r\n    wait(2,seconds);\r\n    claw.stop();\r\n  }\r\n}\r\nvoid autoClampToggle() {\r\n  if(bypass_autoclamp == true) {\r\n    bypass_autoclamp = false;\r\n  } else {\r\n    bypass_autoclamp = true; // This is so simple, thank you previous nodejs knowledge!\r\n  }\r\n}\r\nvoid clawMovement() {\r\n  // Clamps the Motor\r\n  // WE NEED MAX TO MAKE A CLAMP.\r\n  // if (claw.position(degrees) < -70){\r\n  //   claw.position(turns);\r\n  //   claw.spin(reverse);\r\n  //   //claw.spinToPosition(-60,degrees,true);\r\n  //   claw.spinToPosition(0,degrees,true);\r\n  //   return claw.stop();\r\n  // }\r\n  // else {\r\n  //   if(claw.isSpinning()) {return;}\r\n  //   claw.spin(forward);\r\n  //   claw.setVelocity(Controller.AxisD.position(percent),percent);\r\n  // }\r\n  claw.spin(forward);\r\n  claw.setVelocity(Controller.AxisD.position(percent),percent);\r\n}\r\nint main() {\r\n  // Initialize the robot\r\n  init();\r\n  // Allows claw movement on the D Axis\r\n  Controller.AxisD.changed(clawMovement);\r\n  // If the distance is changed, start autoGrab()\r\n  dist.changed(autoGrab);\r\n  // Buttons\r\n  // Debugging Menu\r\n  Brain.buttonUp.pressed(checkClaw);\r\n  Brain.buttonDown.pressed(checkVisual);\r\n  // Turning off/on Autoclamp\r\n  Controller.ButtonEUp.pressed(autoClampToggle);\r\n  checkClaw();\r\n}\r\n// ROBOT ENDS HERE\r\n","textLanguage":"cpp","rconfig":[{"port":[],"name":"Controller","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","e":"","eDir":"false","f":"","fDir":"false","l3r3":"","l3r3Dir":"false","drive":"none"},"triportSourcePort":22},{"port":[8],"name":"claw","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse"},"triportSourcePort":22},{"port":[3],"name":"dist","customName":true,"deviceType":"Distance","deviceClass":"sonar","setting":{},"triportSourcePort":22}],"slot":0,"platform":"IQ","sdkVersion":"20211210.18.00.00","appVersion":"2.3.1","fileFormat":"1.0.1","icon":"","targetBrainGen":"First","target":"Physical"}
